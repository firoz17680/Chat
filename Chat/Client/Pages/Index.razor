@page "/"
@inject HttpClient Http
<h1>Hello, world!</h1>

Welcome to your new app.



@*<Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(2)" Delay="TimeSpan.FromSeconds(1)" Easing="Easings.EaseInOutBack">
        <Counter></Counter>
    </Animate>*@


<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is10">
        <TextEdit Placeholder="Some text value..." />
    </FieldBody>
</Field>
<hr />

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="home">Home</Tab>
        <Tab Name="profile">Profile</Tab>
        <Tab Name="messages">Messages</Tab>
        <Tab Name="settings">Settings</Tab>
    </Items>
    <Content>
        <TabPanel Name="home">
            <Button Clicked="@ShowModal">Show Modal</Button>
            <br />
            <div>Result : @ShouldDelete</div>

        </TabPanel>
        <TabPanel Name="profile">
            <Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
            <LineChart @ref="lineChart" TItem="double" />
        </TabPanel>
        <TabPanel Name="messages">
            <DropdownList TItem="MySelectModel" TValue="int"
                          Data="@myDdlData"
                          TextField="@((item)=>item.MyTextField)"
                          ValueField="@((item)=>item.MyValueField)"
                          SelectedValue="@selectedDropValue"
                          SelectedValueChanged="@MyDropValueChangedHandler"
                          Color="Color.Primary">
                Select item
            </DropdownList>

        </TabPanel>
        <TabPanel Name="settings">
            Content for settings.
        </TabPanel>
    </Content>
</Tabs>

<Modal @ref="modalRef">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Enter name..." />
            </Field>
            <Field>
                <FieldLabel>Surname</FieldLabel>
                <TextEdit Placeholder="Enter surname..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@(()=>HideModal(false))">Close</Button>
            <Button Color="Color.Primary" Clicked="@(()=>HideModal(true))">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{

    bool ShouldDelete = false;
    string selectedTab = "home";

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }

    private Modal modalRef;

    private void ShowModal()
    {
        modalRef.Show();
    }

    private void HideModal(bool value)
    {
        ShouldDelete = value;
        modalRef.Hide();
    }


    LineChart<double> lineChart;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(Labels, await GetLineChartDataset());
        StateHasChanged();
    }

    async Task<LineChartDataset<double>> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = await RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = new string[0]; // =  { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    async Task<List<double>> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        //return new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
        List<double> lst = new List<double>();
        List<WeatherForecast> list= await Http.GetFromJsonAsync<List<WeatherForecast>>($"WeatherForecast/Count/10");
        Labels = new string[10];
        for(int i = 0; i<=list.Count()-1;i++)
        {
            lst.Add(list[i].TemperatureC);
            Labels[i] = list[i].Date.ToString("dd-MMM-yyyy");

        }

        return lst;

    }


    public class MySelectModel
    {
        public int MyValueField { get; set; }
        public string MyTextField { get; set; }
    }

    static string[] Countries = { "Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia & Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom", "Vatican City" };
    IEnumerable<MySelectModel> myDdlData = Enumerable.Range(1, Countries.Length).Select(x => new MySelectModel { MyTextField = Countries[x - 1], MyValueField = x });

    int selectedDropValue { get; set; } = 2;

    void MyDropValueChangedHandler(int newValue)
    {
        selectedDropValue = newValue;
    }

}


